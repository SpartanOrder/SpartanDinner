<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 引入dbconfig.properties属性文件 -->
    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <!-- ========================================配置数据源========================================= -->
    <!-- 配置数据源，使用的是dbcp数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>
    </bean>

    <!-- ========================================分隔线========================================= -->

    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描com.spartan.model.sqlxml目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置
        value="classpath:com/spartan/model/sqlxml/*.xml"指的是classpath(类路径)下mcom.spartan.model.sqlxml包中的所有xml文件
        UserMapper.xml位于com.spartan.model.sqlxml包下，这样UserMapper.xml就可以被自动扫描
         -->
        <property name="mapperLocations" value="classpath:com/spartan/model/sqlxml/*.xml"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=hsqldb
                            supportMethodsArguments=true
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!-- 配置扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描com.spartan.dao这个包以及它的子包下的所有映射接口类 -->
        <property name="basePackage" value="com.spartan.dao"/>
        <property name="markerInterface" value="com.spartan.dao.BaseMapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!-- ========================================分隔线========================================= -->
    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--&lt;!&ndash; 注解方式配置事物 &ndash;&gt;-->
    <!--&lt;!&ndash; <tx:annotation-driven transaction-manager="transactionManager" /> &ndash;&gt;-->

    <!--&lt;!&ndash; 拦截器方式配置事物 &ndash;&gt;-->
    <!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
    <!--<tx:attributes>-->
    <!--<tx:method name="add*" propagation="REQUIRED"/>-->
    <!--<tx:method name="append*" propagation="REQUIRED"/>-->
    <!--<tx:method name="insert*" propagation="REQUIRED"/>-->
    <!--<tx:method name="save*" propagation="REQUIRED"/>-->
    <!--<tx:method name="update*" propagation="REQUIRED"/>-->
    <!--<tx:method name="modify*" propagation="REQUIRED"/>-->
    <!--<tx:method name="edit*" propagation="REQUIRED"/>-->
    <!--<tx:method name="delete*" propagation="REQUIRED"/>-->
    <!--<tx:method name="remove*" propagation="REQUIRED"/>-->
    <!--<tx:method name="repair" propagation="REQUIRED"/>-->
    <!--<tx:method name="delAndRepair" propagation="REQUIRED"/>-->

    <!--<tx:method name="get*" propagation="SUPPORTS"/>-->
    <!--<tx:method name="find*" propagation="SUPPORTS"/>-->
    <!--<tx:method name="load*" propagation="SUPPORTS"/>-->
    <!--<tx:method name="search*" propagation="SUPPORTS"/>-->
    <!--<tx:method name="datagrid*" propagation="SUPPORTS"/>-->

    <!--<tx:method name="*" propagation="SUPPORTS"/>-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--<aop:config>-->
    <!--<aop:pointcut id="transactionPointcut" expression="execution(* com.windy.service..*Impl.*(..))"/>-->
    <!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>-->
    <!--</aop:config>-->

    <!--&lt;!&ndash; 配置druid监控spring jdbc &ndash;&gt;-->
    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
    <!--<property name="patterns">-->
    <!--<list>-->
    <!--<value>com.windy.service.*</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->
    <!--<aop:config>-->
    <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>-->
    <!--</aop:config>-->
</beans>